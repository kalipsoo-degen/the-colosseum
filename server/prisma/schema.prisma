generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  walletAddress String        @unique
  balance       Decimal       @default(0) @db.Decimal(18, 6)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bets          Bet[]
  characters    Character[]
  chatMessages  ChatMessage[]
}

model Character {
  id           String        @id @default(cuid())
  name         String        @unique
  ownerId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bets         Bet[]
  bettingPools BettingPool[]
  owner        User          @relation(fields: [ownerId], references: [id])
  battles      Battle[]      @relation("BattleParticipants")
}

model Battle {
  id              String           @id @default(cuid())
  title           String
  type            BattleType
  startTime       DateTime
  status          BattleStatus     @default(PENDING)
  winnerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bettingType     BettingType      @default(PARIMUTUEL)
  bets            Bet[]
  bettingPools    BettingPool[]
  marketSnapshots MarketSnapshot[]
  participants    Character[]      @relation("BattleParticipants")

  @@index([status])
}

model Bet {
  id          String    @id @default(cuid())
  userId      String
  battleId    String
  characterId String
  amount      Decimal   @db.Decimal(18, 6)
  odds        Decimal   @db.Decimal(10, 4)
  status      BetStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  battle      Battle    @relation(fields: [battleId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([battleId])
  @@index([status])
}

model BettingPool {
  id          String    @id @default(cuid())
  battleId    String
  characterId String
  totalVolume Decimal   @default(0) @db.Decimal(18, 6)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  battle      Battle    @relation(fields: [battleId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])

  @@unique([battleId, characterId])
}

model MarketSnapshot {
  id        String   @id @default(cuid())
  battleId  String
  odds      Json
  createdAt DateTime @default(now())
  battle    Battle   @relation(fields: [battleId], references: [id])

  @@index([battleId, createdAt(sort: Desc)])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum BattleType {
  TEAM_BATTLE
  BATTLE_ROYALE
}

enum BattleStatus {
  PENDING
  ACTIVE
  FINISHED
  CANCELLED
}

enum BettingType {
  AMM
  PARIMUTUEL
}

enum BetStatus {
  PENDING
  WON
  LOST
  CANCELLED
  PENDING_LIQUIDITY
}
